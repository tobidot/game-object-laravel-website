{"version":3,"sources":["../node_modules/@game.object/ts-game-toolbox/src/data/RgbColor.ts","../../../../src/abstract/mvc/Controller.ts","game/controllers/BaseController.ts","game/controllers/GameController.ts","../../../src/geometries/Vector2.ts","../../../src/geometries/Rect.ts","../../../../src/abstract/mvc/ControllerEvent.ts","../../../../src/abstract/mvc/View.ts","../../../../../src/abstract/mvc/helpers/ControllerResponse.ts","../../../../../src/abstract/mvc/controllers/PromiseController.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/Model.ts","game/models/PlayerModel.ts","game/controllers/event_controllers/GameEventController.ts","../../../src/signals/ChainProperty.ts","game/controllers/DelayController.ts","game/controllers/ControllerCollection.ts","../../../src/signals/SignalSocket.ts","../../../src/signals/ObservableSocket.ts","../../../src/signals/index.ts","../../../../src/assets/manager/AssetManager.ts","../../../src/assets/index.ts","../../../src/geometries/index.ts","../../../../src/testing/exceptions/ExceptionExpectedException.ts","../../../src/testing/TestClass.ts","../../../src/testing/TestConsoleLogElement.ts","../../../src/testing/TestDashboard.ts","../../../src/testing/index.ts","../../../../src/trees/exceptions/TreeElementNotFoundException.ts","../../../src/trees/QuadTree.ts","../../../src/trees/index.ts","../../../../src/abstract/mvc/Model.ts","../../../../src/abstract/mvc/CanvasView.ts","../../../../../src/abstract/mvc/helpers/ControllerEvent.ts","../../../../src/abstract/mvc/MVCgame.ts","../../../../src/abstract/mvc/MvcCanvasGame.ts","../../../../src/abstract/mvc/ModelTable.ts","../../../src/abstract/index.ts","../../../src/data/RgbColor.ts","../../../src/data/index.ts","../../../src/commons/Colors.ts","../../../src/commons/index.ts","../index.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/View.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/CanvasView.ts","game/views/main/MainView.ts","game/views/ViewCollection.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/ModelTable.ts","tools/helper.ts","game/models/CameraModel.ts","game/models/GameModel.ts","game/models/MemoryCardModel.ts","game/models/ModelCollection.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/Controller.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/ControllerEvent.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/helpers/ControllerResponse.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/MvcGame.ts","../node_modules/@game.object/ts-game-toolbox/src/abstract/mvc/MvcCanvasGame.ts","game/base/Game.ts","game/main.ts","index.ts"],"names":[],"mappings":"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","file":"src.94cd2d78.js","sourceRoot":"..\\src","sourcesContent":["export class RgbColor {\r\n    public constructor(\r\n        public r: number = 0,\r\n        public g: number = 0,\r\n        public b: number = 0,\r\n        public a: number = 255,\r\n    ) {\r\n\r\n    }\r\n\r\n    public to_hex(): string {\r\n        return \"#\" + [this.r, this.g, this.b, this.a].map(v => (\"00\" + v.toString(16)).substr(-2)).join('');\r\n    }\r\n\r\n    public lerp(other: RgbColor, t: number): RgbColor {\r\n        return new RgbColor(\r\n            this.r * (1 - t) + other.r * t,\r\n            this.g * (1 - t) + other.g * t,\r\n            this.b * (1 - t) + other.b * t,\r\n            this.a * (1 - t) + other.a * t,\r\n        );\r\n    }\r\n}","import { ControllerCollectionBase, ModelCollectionBase, ViewCollectionBase } from \"./Collections\";\r\nimport { ControllerEvent } from \"./ControllerEvent\";\r\nimport { ControllerRouteResponse, ControllerRouteResponseType } from \"./ControllerRouteResponse\";\r\n\r\nexport interface ControllerInterface {\r\n\r\n}\r\nexport class Controller<\r\n    MODEL_COLLECTION extends ModelCollectionBase,\r\n    VIEW_COLLECTION extends ViewCollectionBase,\r\n    CONTROLLER_COLLECTION extends ControllerCollectionBase\r\n    > implements ControllerInterface {\r\n    public constructor(\r\n        protected models: MODEL_COLLECTION,\r\n        protected views: VIEW_COLLECTION,\r\n        protected controllers: CONTROLLER_COLLECTION,\r\n    ) {\r\n\r\n    }\r\n}\r\n\r\nexport function is_controller_interface(controller: any): controller is ControllerInterface {\r\n    return controller instanceof Controller;\r\n}\r\nexport interface EventControllerInterface {\r\n    key_up?: (event: KeyboardEvent) => ControllerRouteResponse;\r\n    key_down?: (event: KeyboardEvent) => ControllerRouteResponse;\r\n    key_pressed?: (event: KeyboardEvent) => ControllerRouteResponse;\r\n    mouse_up?: (event: MouseEvent, canvas_x: number, canvas_y: number) => ControllerRouteResponse;\r\n    mouse_down?: (event: MouseEvent, canvas_x: number, canvas_y: number) => ControllerRouteResponse;\r\n    mouse_pressed?: (event: MouseEvent, canvas_x: number, canvas_y: number) => ControllerRouteResponse;\r\n    mouse_moved?: (event: MouseEvent, canvas_x: number, canvas_y: number) => ControllerRouteResponse;\r\n    update?: (delta_seconds: number) => ControllerRouteResponse;\r\n    dispatch_event?: (event: ControllerEvent) => ControllerRouteResponse;\r\n}\r\n\r\nexport function is_event_controller_interface(controller: any): controller is EventControllerInterface {\r\n    return controller instanceof Controller;\r\n}","import { Controller } from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/Controller\";\r\nimport { ModelCollection } from \"../models/ModelCollection\";\r\nimport { ViewCollection } from \"../views/ViewCollection\";\r\nimport { ControllerCollection } from \"./ControllerCollection\";\r\n\r\nexport class BaseController extends Controller<ModelCollection, ViewCollection, ControllerCollection> {\r\n\r\n}\r\n","import {\r\n    ControllerRouteResponse,\r\n    ControllerRouteResponseType\r\n} from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/ControllerRouteResponse\";\r\nimport { RgbColor } from \"@game.object/ts-game-toolbox/src/data/RgbColor\";\r\nimport { PlayerModel } from \"../models/PlayerModel\";\r\nimport { BaseController } from \"./BaseController\";\r\n\r\nexport class GameController extends BaseController {\r\n\r\n    public readonly colord_gradients = 3;\r\n    public readonly board_size = 6;\r\n    public readonly board_spacing = 80;\r\n    public readonly card_size = 60;\r\n\r\n    public all_colors = (() => {\r\n        let step = Math.trunc(0xdf / this.colord_gradients) + 0x20;\r\n        let buffer: Array<RgbColor> = [];\r\n        for (let r = 0x20; r <= 0xff; r += step) {\r\n            for (let g = 0x20; g <= 0xff; g += step) {\r\n                for (let b = 0x20; b <= 0xff; b += step) {\r\n                    if (r === b && b === g) continue;\r\n                    buffer.push(new RgbColor(\r\n                        r, g, b\r\n                    ));\r\n                }\r\n            }\r\n        }\r\n        return buffer;\r\n    })();\r\n\r\n    /**\r\n     * Start a new game\r\n     */\r\n    public new_game(): ControllerRouteResponse {\r\n        this.new_players();\r\n        this.new_memory_cards();\r\n        this.shuffle_memory_cards();\r\n\r\n        /// response\r\n        this.models.camera.center.set(400 - this.board_spacing * this.board_size / 2, 300 - this.board_spacing * this.board_size / 2);\r\n        const response: ControllerRouteResponseType = {\r\n            view: this.views.main\r\n                .current_player.set(this.models.game.active_player)\r\n                .players.set(this.models.players.all())\r\n                .memory_cards.set(this.models.cards.all())\r\n                .camera.set(this.models.camera),\r\n            controller: this.controllers.for_event.game_controller,\r\n        };\r\n        return response;\r\n    }\r\n\r\n    protected new_memory_cards() {\r\n        let last_color: RgbColor | null = null;\r\n        for (let x = 0; x < this.board_size; x++) {\r\n            for (let y = 0; y < this.board_size; y++) {\r\n                let card = this.models.cards.insert_new();\r\n                card.collider.set(x * this.board_spacing + 10, y * this.board_spacing + 10, this.card_size, this.card_size);\r\n                card.is_revealed = false;\r\n\r\n                if (last_color === null) {\r\n                    card.color = last_color = this.get_random_color();\r\n                } else {\r\n                    card.color = last_color;\r\n                    last_color = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected shuffle_memory_cards() {\r\n        const all_cards = this.models.cards.all();\r\n        for (let i = 0; i < 25 * 2; ++i) {\r\n            const card_a = all_cards[Math.trunc(all_cards.length * Math.random())];\r\n            const card_b = all_cards[Math.trunc(all_cards.length * Math.random())];\r\n            // swap the colors\r\n            [card_a.color, card_b.color] = [card_b.color, card_a.color];\r\n        }\r\n    }\r\n\r\n    protected new_players() {\r\n        for (let i = 0; i < 2; ++i) {\r\n            this.models.players.insert_new((model: PlayerModel) => {\r\n                model.points = 0;\r\n                model.selected_card = null;\r\n                this.models.game.max_player_id = model.id;\r\n                return model;\r\n            });\r\n        }\r\n        this.models.game.active_player = this.models.players.all()[0];\r\n    }\r\n\r\n    public get_random_color(): RgbColor {\r\n        return this.all_colors[Math.trunc(Math.random() * this.all_colors.length)];\r\n    }\r\n\r\n\r\n\r\n}","type radians = number;\r\ntype degrees = number;\r\n\r\nexport interface Vector2I {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport class Vector2 {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(vec: Readonly<Vector2I>)\r\n    public constructor(x?: number, y?: number)\r\n    public constructor(x: number | Readonly<Vector2I> = 0, y: number = 0) {\r\n        if (typeof x === \"object\") {\r\n            this.x = x.x;\r\n            this.y = x.y;\r\n        } else {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n    }\r\n\r\n    public set(vec: Readonly<Vector2I>): this\r\n    public set(x: number, y: number): this\r\n    public set(x: number | Readonly<Vector2I>, y: number = 0): this {\r\n        if (typeof x === \"object\") {\r\n            this.x = x.x;\r\n            this.y = x.y;\r\n        } else {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public sub(other: Vector2I): this {\r\n        this.x -= other.x;\r\n        this.y -= other.y;\r\n        return this;\r\n    }\r\n\r\n    public add(other: Vector2I): this {\r\n        this.x += other.x;\r\n        this.y += other.y;\r\n        return this;\r\n    }\r\n\r\n    public mul(scalar: number): this {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n        return this;\r\n    }\r\n\r\n    public divide(scalar: number): this {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n        return this;\r\n    }\r\n\r\n    public len2(): number {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n\r\n    public len(): number {\r\n        return Math.sqrt(this.len2());\r\n    }\r\n\r\n    public set_magnitude(magnitude: number): this {\r\n        const len = this.len();\r\n        this.x = this.x / len * magnitude;\r\n        this.y = this.y / len * magnitude;\r\n        return this;\r\n    }\r\n\r\n    public dot(other: Vector2I): number {\r\n        return this.x * other.x + this.y * other.y;\r\n    }\r\n\r\n    public cross(other: Vector2I): Vector2 {\r\n        return new Vector2(this.x * other.y, this.y * other.x);\r\n    }\r\n\r\n    public get_unsigned(): Vector2 {\r\n        return new Vector2(Math.abs(this.x), Math.abs(this.y));\r\n    }\r\n\r\n    public cpy(): Vector2 {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n\r\n    public normalize(): this {\r\n        const len = this.len();\r\n        if (len < 0.000001) return this;\r\n        this.x /= len;\r\n        this.y /= len;\r\n        return this;\r\n    }\r\n\r\n    public get_projection_of(other: Vector2I): Vector2 {\r\n        const len = this.dot(other) / this.len2();\r\n        return this.cpy().mul(len);\r\n    }\r\n\r\n    public is_null_vector(): boolean {\r\n        return Math.abs(this.x) < 0.001 && Math.abs(this.y) < 0.001;\r\n    }\r\n\r\n    public get_angle(): radians {\r\n        // let 0 be showing up (0,1)\r\n        return (Math.atan2(this.y, this.x) + (Math.PI / 2)) % (2 * Math.PI);\r\n    }\r\n\r\n    public rotate_radians_clockwise(radians: number): this {\r\n        const sin = Math.sin(radians);\r\n        const cos = Math.cos(radians);\r\n        const new_x = -sin * this.y + cos * this.x;\r\n        const new_y = sin * this.x + cos * this.y;\r\n        this.y = new_y;\r\n        this.x = new_x;\r\n        return this;\r\n    }\r\n\r\n    public rotate_right_angles_clockwise(count: number = 1): this {\r\n        if (count < 1) return this;\r\n        const new_x = this.y;\r\n        this.y = -this.x;\r\n        this.x = new_x;\r\n        return this.rotate_right_angles_clockwise(count - 1);\r\n    }\r\n\r\n    /**\r\n     * ### Static methods\r\n     */\r\n\r\n    /**\r\n     * Standard Vectors\r\n     */\r\n    public static readonly RIGHT = new Vector2(1, 0);\r\n    public static readonly LEFT = new Vector2(-1, 0);\r\n    public static readonly UP = new Vector2(0, -1);\r\n    public static readonly DOWN = new Vector2(0, 1);\r\n\r\n    /**\r\n     * Create a Vector2 from an angle and a length.\r\n     * An angle of 0 points to the right, turning clockwise.\r\n     *\r\n     * @param angle\r\n     * @param length\r\n     */\r\n    public static from_angle(angle: radians, length: number = 1): Vector2 {\r\n        return new Vector2(Math.cos(angle) * length, Math.sin(angle) * length);\r\n    }\r\n\r\n}","import {Vector2, Vector2I} from \"./Vector2\";\r\n\r\nexport interface RectI {\r\n    x: number,\r\n    y: number,\r\n    w: number,\r\n    h: number\r\n}\r\n\r\n/**\r\n * @class Rect\r\n * A helper class for Rectangles\r\n */\r\nexport class Rect implements RectI {\r\n    public constructor(public x: number = 0, public y: number = 0, public w: number = 0, public h: number = 0) {\r\n\r\n    }\r\n\r\n    public get left(): number {\r\n        return this.x;\r\n    }\r\n\r\n    public get_left(): number {\r\n        return this.x;\r\n    }\r\n\r\n    public get top(): number {\r\n        return this.y;\r\n    }\r\n\r\n    public get_top(): number {\r\n        return this.y;\r\n    }\r\n\r\n    public get right(): number {\r\n        return this.x + this.w;\r\n    }\r\n\r\n    public get_right(): number {\r\n        return this.x + this.w;\r\n    }\r\n\r\n    public get_bottom(): number {\r\n        return this.y + this.h;\r\n    }\r\n\r\n    public get bottom(): number {\r\n        return this.y + this.h;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.w;\r\n    }\r\n\r\n    public get_width(): number {\r\n        return this.w;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this.h;\r\n    }\r\n\r\n    public get_height(): number {\r\n        return this.h;\r\n    }\r\n\r\n    public cpy(): Rect {\r\n        return new Rect(this.x, this.y, this.w, this.h);\r\n    }\r\n\r\n    public set(x: RectI): this;\r\n    public set(x: number, y: number, w?: number, h?: number): this;\r\n    public set(x: number | RectI, y?: number, w?: number, h?: number): this {\r\n        if (typeof x === \"object\") {\r\n            this.x = x.x;\r\n            this.y = x.y;\r\n            this.w = x.w;\r\n            this.h = x.h;\r\n        } else {\r\n            this.x = x;\r\n            this.y = y as number;\r\n            if (w !== undefined) this.w = w;\r\n            if (h !== undefined) this.h = h;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Secondary properties\r\n     */\r\n\r\n    public get_area(): number {\r\n        return this.w * this.h;\r\n    }\r\n\r\n    public get center(): Vector2I {\r\n        return new Vector2(this.x + this.w / 2, this.y + this.h / 2);\r\n    }\r\n\r\n    public set center(center: Vector2I) {\r\n        this.x = center.x - this.w / 2;\r\n        this.y = center.y - this.h / 2;\r\n    }\r\n\r\n    public set_center(center: Vector2I): this {\r\n        this.center = center;\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Expand this rectangle to include the given target.\r\n     * @param target\r\n     */\r\n    public expand_to(target: Readonly<Vector2I>): this {\r\n        if (this.contains(target)) return this;\r\n        const left = Math.min(this.x, target.x);\r\n        const top = Math.min(this.y, target.y);\r\n        const right = Math.max(this.get_right(), target.x);\r\n        const bottom = Math.max(this.get_bottom(), target.y);\r\n        return this.set(left, top, right - left, bottom - top);\r\n    }\r\n\r\n    public overlaps_with(other: RectI): boolean {\r\n        return Rect.overlap(this, other);\r\n    }\r\n\r\n    public is_within(outer: RectI): boolean {\r\n        return Rect.is_within(this, outer);\r\n    }\r\n\r\n    public contains(point: Vector2I): boolean;\r\n    public contains(x: number, y: number): boolean;\r\n    public contains(x: number | Vector2I, y?: number): boolean {\r\n        if (typeof x === \"object\") {\r\n            return Rect.contains(this, x);\r\n        }\r\n        if (typeof y !== \"number\") throw new Error(\"Unexpected type error\");\r\n        return Rect.contains(this, {x, y});\r\n    }\r\n\r\n    /**\r\n     * Manipulate this rectangle to change into the target rectangle by the factor t.\r\n     *\r\n     * @param target\r\n     * @param t\r\n     *  0 => rectangle is unchanged\r\n     *  ..\r\n     *  1 => the rectangle is identical to the target rectangle.\r\n     */\r\n    public lerp(target: Rect, t: number): this {\r\n        const it = 1 - t;\r\n        this.x = this.x * it + target.x * t;\r\n        this.y = this.y * it + target.y * t;\r\n        this.w = this.w * it + target.w * t;\r\n        this.h = this.h * it + target.h * t;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This functions returns the corners of this rectangle in clockwise order.\r\n     * Starting with the left-top one.\r\n     *\r\n     * @returns array\r\n     * [ left_top, right_top, right_bottom, left_bottom ]\r\n     */\r\n    public get_corners(): [Vector2I, Vector2I, Vector2I, Vector2I] {\r\n        return [\r\n            {x: this.left, y: this.top},\r\n            {x: this.right, y: this.top},\r\n            {x: this.right, y: this.bottom},\r\n            {x: this.left, y: this.bottom},\r\n        ];\r\n    }\r\n\r\n\r\n    /**\r\n     * ### static function\r\n     */\r\n\r\n    /**\r\n     * Is the given point inside the rectangle.\r\n     * The borders of the rectangle count as inside.\r\n     * @see Rect.contains_exclusive\r\n     *\r\n     * @param rect\r\n     *  The rectangle defining the boundry\r\n     * @param point\r\n     *  The point to check\r\n     * @return boolean\r\n     *  True => the point is inside\r\n     */\r\n    public static contains(rect: RectI, point: Vector2I): boolean {\r\n        return (point.x >= rect.x && point.y >= rect.y && point.x <= rect.x + rect.w && point.y <= rect.y + rect.h);\r\n    }\r\n\r\n    /**\r\n     * Is the given point inside the rectangle.\r\n     * The borders of the rectangle count as outside.\r\n     * @see Rect.contains\r\n     *\r\n     * @param rect\r\n     *  The rectangle bilding the boundry\r\n     * @param point\r\n     *  The point to check\r\n     * @return boolean\r\n     *  True => the point is inside\r\n     */\r\n    public static contains_exclusive(rect: RectI, point: Vector2I): boolean {\r\n        return (point.x > rect.x && point.y > rect.y && point.x < rect.x + rect.w && point.y < rect.y + rect.h);\r\n    }\r\n\r\n    /**\r\n     * Do theses Rectangles overlap\r\n     * @param a\r\n     * @param b\r\n     */\r\n    public static overlap(a: RectI, b: RectI): boolean {\r\n        const overlap_x = (a.x + a.w > b.x && a.x <= b.x) || (b.x + b.w > a.x && b.x <= a.x);\r\n        const overlap_y = (a.y + a.h > b.y && a.y <= b.y) || (b.y + b.h > a.y && b.y <= a.y);\r\n        return overlap_x && overlap_y;\r\n    }\r\n\r\n    /**\r\n     * Is the inner rectangle completly within the outer rectangle.\r\n     *\r\n     * @param inner\r\n     * @param outer\r\n     */\r\n    public static is_within(inner: RectI, outer: RectI) {\r\n        const within_x = inner.x > outer.x && inner.x + inner.w < outer.x + outer.w;\r\n        const within_y = inner.y > outer.y && inner.y + inner.h < outer.y + outer.h;\r\n        return within_x && within_y;\r\n    }\r\n}\r\n","export interface ControllerEvent {\r\n    event_name: string;\r\n    fire_at?: number;\r\n}\r\n\r\nexport function is_controller_event(object: any): object is ControllerEvent {\r\n    return typeof object === \"object\" && \"event_name\" in object;\r\n}","import { ViewCollectionBase } from \"./Collections\";\r\n\r\nexport interface ViewInterface {\r\n    update: (() => void) | null;\r\n    draw: () => void;\r\n    set_update: (update: () => void) => this;\r\n}\r\n\r\nexport function is_view_interface(view: any): view is ViewInterface {\r\n    return view instanceof View;\r\n}\r\nexport class View<VIEW_COLLECTION extends ViewCollectionBase> implements ViewInterface {\r\n    public constructor(protected collection: VIEW_COLLECTION) {\r\n\r\n    }\r\n    public update: (() => void) | null = null;\r\n    public draw() { };\r\n\r\n    public set_update(update: () => void): this {\r\n        this.update = update;\r\n        return this;\r\n    }\r\n}","import { is_event_controller_interface } from \"../Controller\";\r\nimport { is_controller_event } from \"../ControllerEvent\";\r\nimport { ControllerRouteResponseType, ControllerRouteResponse } from \"../ControllerRouteResponse\";\r\nimport { is_view_interface } from \"../View\";\r\n\r\n\r\nexport function update_controller_response<T extends ControllerRouteResponseType>(base: T, response: ControllerRouteResponse): T {\r\n    if (response === null) {\r\n        return base;\r\n    }\r\n    if (is_view_interface(response)) {\r\n        base.view = response;\r\n        return base;\r\n    }\r\n    if (is_event_controller_interface(response)) {\r\n        base.controller = response;\r\n        return base;\r\n    }\r\n    if (is_controller_event(response)) {\r\n        if (base.events === undefined) base.events = [];\r\n        base.events.push(response);\r\n        return base;\r\n    }\r\n    base.controller = response.controller;\r\n    base.view = response.view;\r\n    if (response.events !== undefined) {\r\n        if (base.events === undefined) base.events = [];\r\n        base.events.push(...response.events);\r\n    }\r\n    return base;\r\n}","import { EventControllerInterface, ControllerInterface } from \"../Controller\";\r\nimport { ControllerEvent } from \"../ControllerEvent\";\r\nimport { ControllerRouteResponseType, ControllerRouteResponse } from \"../ControllerRouteResponse\";\r\nimport { update_controller_response } from \"../helpers/ControllerResponse\";\r\nimport { ViewInterface } from \"../View\";\r\n\r\n\r\nexport interface PromisableController {\r\n    next: null | (() => ControllerRouteResponseType);\r\n}\r\n\r\nexport type PromisableControllerRouteResponseType = ControllerRouteResponseType & { controller: PromisableController };\r\nexport type PromisableControllerRouteResponse = null | ViewInterface | (EventControllerInterface & PromisableController) | ControllerEvent | PromisableControllerRouteResponseType;\r\ntype PromiseResolver = () => PromisableControllerRouteResponseType;\r\ntype NonPromiseResolver = () => (ControllerRouteResponseType);\r\n\r\nexport class PromiseController implements ControllerRouteResponseType {\r\n    protected next: PromiseController | null = null;\r\n    protected resolver: PromiseResolver;\r\n    protected cached_response: ControllerRouteResponseType | null = null;\r\n\r\n    public constructor(resolver: PromiseResolver | PromisableControllerRouteResponseType) {\r\n        this.resolver = this.create_resolver_function(resolver);\r\n    }\r\n\r\n    protected create_resolver_function(resolver: PromiseResolver | PromisableControllerRouteResponseType): PromiseResolver {\r\n        return () => {\r\n            const response: PromisableControllerRouteResponseType = (typeof resolver === \"object\") ? resolver : resolver();\r\n            response.controller.next = this.create_controller_next_function(response);\r\n            return response;\r\n        };\r\n    }\r\n\r\n    protected create_controller_next_function(response: PromisableControllerRouteResponseType) {\r\n        return () => {\r\n            if (this.next === null) return this;\r\n            this.resolver = this.next.resolver;\r\n            this.cached_response = null;\r\n            this.next = this.next.next;\r\n            return this;\r\n        };\r\n    }\r\n\r\n    protected get response(): ControllerRouteResponseType {\r\n        if (this.cached_response) return this.cached_response;\r\n        const response: (ControllerRouteResponse) = this.resolver();\r\n        this.cached_response = {};\r\n        update_controller_response(this.cached_response, response);\r\n        return this.cached_response;\r\n    }\r\n\r\n    public get view(): ViewInterface | null | undefined {\r\n        return this.response?.view;\r\n    }\r\n\r\n    public get controller(): ControllerInterface | null | undefined {\r\n        return this.response?.controller;\r\n    }\r\n\r\n    public get events(): Array<ControllerEvent> | undefined {\r\n        return this.response?.events;\r\n    }\r\n\r\n    public then(resolve: PromiseResolver | PromisableControllerRouteResponseType | PromiseController): PromiseController {\r\n        if (this.next) {\r\n            this.next.then(resolve);\r\n        } else {\r\n            if (resolve instanceof PromiseController) {\r\n                this.next = resolve;\r\n            } else {\r\n                this.next = new PromiseController(resolve);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public finaly(resolve: NonPromiseResolver | ControllerRouteResponseType): PromiseController {\r\n        if (this.next) {\r\n            this.next.finaly(resolve);\r\n        } else {\r\n            this.next = new FinalPromiseController(resolve);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class FinalPromiseController extends PromiseController {\r\n    public constructor(resolver: NonPromiseResolver | ControllerRouteResponseType) {\r\n        super((): PromisableControllerRouteResponseType => {\r\n            const response: ControllerRouteResponseType = (typeof resolver === \"object\") ? resolver : resolver();\r\n            return response as PromisableControllerRouteResponseType;\r\n        });\r\n    }\r\n\r\n    protected create_resolver_function(resolver: PromiseResolver | PromisableControllerRouteResponseType): PromiseResolver {\r\n        return () => {\r\n            return (typeof resolver === \"object\") ? resolver : resolver();\r\n        };\r\n    }\r\n}\r\n","import { ModelCollectionBase } from \"./Collections\";\r\n\r\nexport interface ModelInterface {\r\n\r\n}\r\n\r\nexport class Model<MODEL_COLLECTION extends ModelCollectionBase> implements ModelInterface {\r\n    constructor(protected models: MODEL_COLLECTION) { }\r\n}","import { ControllerRouteResponse } from \"@game.object/ts-game-toolbox/src/abstract/mvc/ControllerRouteResponse\";\r\nimport { Model } from \"@game.object/ts-game-toolbox/src/abstract/mvc/Model\";\r\nimport { assert_never } from \"../../tools/helper\";\r\nimport { MemoryCardModel } from \"./MemoryCardModel\";\r\nimport { ModelCollection } from \"./ModelCollection\";\r\n\r\nexport type PickCardResponseCallback = (previous: ControllerRouteResponse, picked_card: MemoryCardModel) => ControllerRouteResponse;\r\nexport enum PickCardResponseType {\r\n    INVALID_MOVE,\r\n    REVEALED_FIRST_CARD,\r\n    REVEALED_FITTING_PAIR,\r\n    REVEALED_UNFITTING_PAIR,\r\n};\r\nexport class PickCardResponse {\r\n    public response: ControllerRouteResponse = {};\r\n    public constructor(\r\n        private state: PickCardResponseType,\r\n        private picked_card: MemoryCardModel\r\n    ) { }\r\n    public do_on(callback: PickCardResponseCallback, ...events: PickCardResponseType[]): this {\r\n        if (events.includes(this.state)) {\r\n            this.response = callback(this.response, this.picked_card);\r\n        }\r\n        return this;\r\n    };\r\n}\r\n\r\n/**\r\n * Model representing the player state\r\n */\r\nexport class PlayerModel extends Model<ModelCollection> {\r\n    private static next_id = 1;\r\n    public id: number = PlayerModel.next_id++;\r\n    //\r\n    public selected_card: MemoryCardModel | null = null;\r\n    public points: number = 0;\r\n    // \r\n    /**\r\n     * \r\n     * @param card \r\n     *  the card the player has selected\r\n     * @return PickCardResponse\r\n     *  returns the possible outcomes\r\n     */\r\n    public pick_card(card: MemoryCardModel): PickCardResponse {\r\n        if (card.is_drawn) return new PickCardResponse(PickCardResponseType.INVALID_MOVE, card);\r\n        if (!this.selected_card) {\r\n            return new PickCardResponse(PickCardResponseType.REVEALED_FIRST_CARD, card);\r\n        } else {\r\n            if (this.selected_card === card) return new PickCardResponse(PickCardResponseType.INVALID_MOVE, card);\r\n            if (this.selected_card.color === card.color) {\r\n                return new PickCardResponse(PickCardResponseType.REVEALED_FITTING_PAIR, card);\r\n            } else {\r\n                return new PickCardResponse(PickCardResponseType.REVEALED_UNFITTING_PAIR, card);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { BaseController } from \"../BaseController\";\r\nimport { EventControllerInterface } from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/Controller\";\r\nimport { ControllerRouteResponse } from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/ControllerRouteResponse\";\r\nimport { Rect } from \"@game.object/ts-game-toolbox/dist/src/geometries/Rect\";\r\nimport { MemoryCardModel } from \"../../models/MemoryCardModel\";\r\nimport { CameraModel } from \"../../models/CameraModel\";\r\nimport { tools } from \"@game.object/ts-game-toolbox\";\r\nimport { PromiseController } from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/controllers/PromiseController\";\r\nimport { PickCardResponse, PickCardResponseType } from \"../../models/PlayerModel\";\r\n\r\nexport class GameEventController extends BaseController implements EventControllerInterface {\r\n\r\n    public update(delta_seconds: number): ControllerRouteResponse {\r\n        return null;\r\n    }\r\n\r\n    public mouse_pressed(event: MouseEvent, x: number, y: number): ControllerRouteResponse {\r\n        const camera: CameraModel = this.models.camera;\r\n        let hit: MemoryCardModel | null = this.models.cards.all()\r\n            .reduce((hit: MemoryCardModel | null, next: MemoryCardModel) => {\r\n                const screen_collider = camera.transformRect(new Rect().set(next.collider));\r\n                if (screen_collider.contains({ x, y })) return next;\r\n                return hit;\r\n            }, null);\r\n        if (hit !== null) {\r\n            const player = this.models.game.active_player\r\n            if (!player) {\r\n                throw new Error(\"Who is my player\");\r\n            }\r\n            return player.pick_card(hit)\r\n                // Nothing happens\r\n                // reveal the first card\r\n                .do_on((response, card) => {\r\n                    card.is_revealed = true;\r\n                    player.selected_card = card;\r\n                    return response;\r\n                }, PickCardResponseType.REVEALED_FIRST_CARD)\r\n                // Second Draw\r\n                .do_on((response, card) => {\r\n                    return new PromiseController(() => {\r\n                        card.is_revealed = true;\r\n                        return {\r\n                            controller: this.controllers.delay_controller\r\n                                .trigger_at.set(performance.now() + 1000 * 1),\r\n                        };\r\n                    });\r\n                }, PickCardResponseType.REVEALED_UNFITTING_PAIR,\r\n                    PickCardResponseType.REVEALED_FITTING_PAIR)\r\n                // Bad draw\r\n                .do_on((response, card) => {\r\n                    if (!(response instanceof PromiseController)) return response;\r\n                    return response.finaly(() => {\r\n                        if (!player.selected_card) return response;\r\n                        card.is_revealed = false;\r\n                        player.selected_card.is_revealed = false;\r\n                        player.selected_card = null;\r\n                        this.models.game.next_player();\r\n                        return {\r\n                            view: this.views.main.current_player.set(this.models.game.active_player),\r\n                            controller: this\r\n                        };\r\n                    });\r\n                }, PickCardResponseType.REVEALED_UNFITTING_PAIR)\r\n                // \r\n                .do_on((response, card) => {\r\n                    if (!(response instanceof PromiseController)) return response;\r\n                    return response.finaly(() => {\r\n                        if (!player.selected_card) return response;\r\n                        player.selected_card.is_drawn = card.is_drawn = true;\r\n                        player.selected_card = null;\r\n                        player.points++;\r\n                        return {\r\n                            controller: this\r\n                        };\r\n                    });\r\n                }, PickCardResponseType.REVEALED_FITTING_PAIR)\r\n                .response;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}","export class ChainProperty<VIEW, PROPERTY> {\r\n    public constructor(protected view: VIEW, protected property: PROPERTY) { }\r\n    public set(value: PROPERTY): VIEW {\r\n        this.property = value;\r\n        return this.view;\r\n    }\r\n    public get(): PROPERTY {\r\n        return this.property;\r\n    }\r\n}\r\n\r\nexport var CP = ChainProperty;","import { ControllerRouteResponseType } from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/ControllerRouteResponse\";\r\nimport { PromisableController } from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/controllers/PromiseController\";\r\nimport { ChainProperty } from \"@game.object/ts-game-toolbox/dist/src/signals/ChainProperty\";\r\nimport { Controller, EventControllerInterface } from \"@game.object/ts-game-toolbox/src/abstract/mvc/Controller\";\r\nimport { BaseController } from \"./BaseController\";\r\nimport { ControllerCollection } from \"./ControllerCollection\";\r\n\r\nexport class DelayController extends BaseController implements PromisableController, EventControllerInterface {\r\n    public next: (() => ControllerRouteResponseType) | null = null;\r\n\r\n    public trigger_at = new ChainProperty<this, number>(this, 0);\r\n\r\n    public update() {\r\n        if (performance.now() > this.trigger_at.get()) {\r\n            if (this.next) return this.next();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public mouse_pressed(event: MouseEvent) {\r\n        if (this.next) return this.next();\r\n        return null;\r\n    }\r\n}","import { ModelCollection } from \"../models/ModelCollection\";\r\nimport { ViewCollection } from \"../views/ViewCollection\";\r\nimport { GameController } from \"./GameController\";\r\nimport { GameEventController } from \"./event_controllers/GameEventController\";\r\nimport { ControllerCollectionBase } from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/Collections\";\r\nimport { DelayController } from \"./DelayController\";\r\n\r\nexport interface ControllerCollection extends ControllerCollectionBase {\r\n    game_controller: GameController,\r\n    delay_controller: DelayController,\r\n    for_event: {\r\n        game_controller: GameEventController,\r\n    }\r\n}\r\n\r\nexport function create_controllers(models: ModelCollection, views: ViewCollection): ControllerCollection {\r\n    const controllers: ControllerCollection = {} as ControllerCollection;\r\n    const buffer: ControllerCollection = {\r\n        game_controller: new GameController(models, views, controllers),\r\n        delay_controller: new DelayController(models, views, controllers),\r\n        for_event: {\r\n            game_controller: new GameEventController(models, views, controllers),\r\n        }\r\n    };\r\n    return Object.assign(controllers, buffer);\r\n}","export interface Listener<T> {\r\n    (signal: T): void;\r\n}\r\n\r\nexport class SignalSocket<T> {\r\n    private listeners: Array<Listener<T>> = [];\r\n    public add(listener: Listener<T>): void {\r\n        this.listeners.push(listener);\r\n    }\r\n    public remove(listener: Listener<T>): void {\r\n        const index: number = this.listeners.indexOf(listener);\r\n        if (index < 0) return;\r\n        const length = this.listeners.length;\r\n        this.listeners[index] = this.listeners[length - 1];\r\n        this.listeners.pop();\r\n    }\r\n    public trigger_event(signal: T) {\r\n        this.listeners.forEach((listener: Listener<T>) => {\r\n            listener(signal);\r\n        });\r\n    }\r\n}","import { SignalSocket } from \"./SignalSocket\";\r\n\r\n\r\nexport class ObservableSocket<T> extends SignalSocket<{ old: T, new: T }> {\r\n    constructor(private value: T) {\r\n        super();\r\n    }\r\n\r\n    public trigger_event() { throw new Error('Do not call this directly'); }\r\n\r\n    public set(new_value: T): void {\r\n        super.trigger_event({\r\n            old: this.value,\r\n            new: new_value,\r\n        });\r\n        this.value = new_value;\r\n    }\r\n\r\n    public get(): T {\r\n        return this.value;\r\n    }\r\n};","import { SignalSocket } from \"./SignalSocket\";\r\nimport { ObservableSocket } from \"./ObservableSocket\";\r\n// export * from \"./SignalSocket\";\r\n// export * from \"./ObservableSocket\";\r\n\r\nexport var signals = {\r\n    SignalSocket,\r\n    ObservableSocket,\r\n};","export class AssetManager {\r\n\r\n}","import { AssetManager } from \"./manager/AssetManager\"\r\n// export * from \"./manager/AssetManager\"\r\n\r\nexport var assets = {\r\n    AssetManager\r\n};","import {Rect} from \"./Rect\";\r\nimport {Vector2} from \"./Vector2\";\r\n\r\nexport var geometries = {\r\n    Rect,\r\n    Vector2,\r\n};","export class TestClassExceptionExpectedExcetpion extends Error {\r\n\r\n}","import { TestClassExceptionExpectedExcetpion } from \"./exceptions/ExceptionExpectedException\";\r\n\r\ntype Printable<T> = { toString(): string };\r\ntype Class<T> = { new(...args: any): T, name: string };\r\ntype Named<T> = { name: string };\r\n\r\nexport abstract class TestClass {\r\n    public abstract get_name(): string;\r\n    public set_up() { console.log(this); }\r\n    public tear_down() { }\r\n    public set_class_up() { }\r\n    public tear_class_down() { }\r\n    public run_all_test_cases() {\r\n        const test = this;\r\n        console.log(\">>> Start \" + test.get_name());\r\n        this.set_class_up();\r\n        for (const test_name of Object.getOwnPropertyNames((<any>test).__proto__)) {\r\n            const test_statement = (<any>test)[test_name];\r\n            if (typeof test_statement === \"function\" && test_name.indexOf('test') === 0) {\r\n                console.log('%c > Run ' + test_name, 'background: blue; color: yellow;');\r\n                test.set_up();\r\n                test_statement.call(test);\r\n                test.tear_down();\r\n                console.log('%c < Done ', 'background: blue; color: green;');\r\n            }\r\n        }\r\n        this.tear_class_down();\r\n        console.log(\"<<< Done \" + test.get_name());\r\n    }\r\n\r\n    public assert_exception<E extends Error>(exception: Class<E>, callback: () => void) {\r\n        try {\r\n            callback();\r\n            throw new TestClassExceptionExpectedExcetpion('Expected an exception from ' + String(callback).substr(0, 255));\r\n        } catch (error) {\r\n            if (!(error instanceof exception)) throw error;\r\n            this.success();\r\n        }\r\n    }\r\n\r\n    public assert_instance_of<T extends Printable<T>>(value: Printable<T>, expected: Class<T>): void {\r\n        if (false === value instanceof expected) {\r\n            throw new Error('Expected ' + value.toString() + ' to be of instance ' + expected.name);\r\n        }\r\n        this.success();\r\n    }\r\n\r\n    public assert_equals<T>(value: T, expected: T): void {\r\n        if (value !== expected) {\r\n            throw new Error('Expected ' + String(value) + ' to be equal to ' + String(expected));\r\n        }\r\n        this.success();\r\n    }\r\n\r\n    public assert_not_equals<T>(value: T, expected: T): void {\r\n        if (value === expected) {\r\n            throw new Error('Expected ' + String(value) + ' to be NOT equal to ' + String(expected));\r\n        }\r\n        this.success();\r\n    }\r\n\r\n    public assert_true<T>(value: boolean): void {\r\n        if (value === false) {\r\n            throw new Error('Expected ' + String(value) + ' to be true');\r\n        }\r\n        this.success();\r\n    }\r\n\r\n    public assert_false<T>(value: boolean): void {\r\n        if (value === true) {\r\n            throw new Error('Expected ' + String(value) + ' to be false');\r\n        }\r\n        this.success();\r\n    }\r\n\r\n    private success() {\r\n        console.log('.');\r\n    }\r\n}","export class TestConsoleLogElement {\r\n    private container: HTMLElement;\r\n\r\n    constructor() {\r\n        this.container = this.create_element();\r\n        this.hook_into_console_log();\r\n        this.hook_into_console_error();\r\n        this.hook_into_window_error();\r\n    }\r\n\r\n    public get_element(): HTMLElement {\r\n        return this.container;\r\n    }\r\n\r\n    public clear() {\r\n        this.container.innerHTML = \"\";\r\n    }\r\n\r\n    protected hook_into_console_log() {\r\n        const console_log = window.console.log;\r\n        console.log = (...args: any[]) => {\r\n            console_log(...args);\r\n            this.log(...args);\r\n        };\r\n    }\r\n\r\n    protected hook_into_console_error() {\r\n        const console_error = window.console.error;\r\n        console.error = (...args: any[]) => {\r\n            const text = args[0].toString();\r\n            console_error(text);\r\n            this.log(\"%c\" + text, \"color: red;\", ...args);\r\n        };\r\n    }\r\n\r\n    protected hook_into_window_error() {\r\n        window.addEventListener('error', this.window_on_error_func);\r\n    }\r\n\r\n    protected window_on_error_func: OnErrorEventHandlerNonNull = (\r\n        event: Event | string,\r\n        source?: string,\r\n        lineno?: number,\r\n        colno?: number,\r\n        error?: Error\r\n    ): any => {\r\n        if (event instanceof ErrorEvent) {\r\n            source = event.filename;\r\n            lineno = event.lineno;\r\n            colno = event.colno;\r\n            error = event.error;\r\n        }\r\n        if (error instanceof Error) {\r\n            console.error(error.name + ' : ' + error.message);\r\n        } else {\r\n            console.error(event);\r\n        }\r\n        // const source_file = source?.replace(window.location.origin, '');\r\n        // const error_position = \"[\" + [lineno, colno].join(':') + \"]\";\r\n        // console.error([...new Array(4)].map(() => '=').join('') + source_file + error_position);\r\n    }\r\n\r\n\r\n    protected create_element(): HTMLElement {\r\n        const container = document.createElement('div');\r\n        container.className = \"test-console-log\";\r\n        return container;\r\n    }\r\n\r\n    public log(...args: any[]) {\r\n        const format_or_log = args.shift();\r\n        if (typeof format_or_log === \"string\") {\r\n            return this.print_format(format_or_log, ...args)\r\n                .then((...rest_args: any[]) => {\r\n                    this.log(...args);\r\n                });\r\n        } else {\r\n            args.forEach((arg: any) => {\r\n                this.print((arg).toString());\r\n            });\r\n        }\r\n    }\r\n\r\n    public async print_format(format: string, ...args: any[]) {\r\n        return new Promise((resolve, reject) => {\r\n            let style = '';\r\n            let text = format;\r\n            if (format.indexOf('%c') === 0) {\r\n                style = args[0];\r\n                text = text.substr(2);\r\n            }\r\n            while (text.indexOf('%s') !== -1) {\r\n                const next = args.shift();\r\n                if (next === null) throw Error('argument mismatch');\r\n                text = text.replace('%s', next.toString());\r\n            }\r\n            this.print(text, style)\r\n        });\r\n    }\r\n\r\n    public print(text: string, style?: string) {\r\n        const span = document.createElement('span');\r\n        if (style) span.style.cssText = style;\r\n        span.innerText = text;\r\n        this.container.append(span);\r\n    }\r\n}","import { TestConsoleLogElement } from \"./TestConsoleLogElement\";\r\nimport { TestClass } from \"./TestClass\";\r\n\r\ninterface TestDashboardElements {\r\n    dashboard: HTMLElement,\r\n    button_list: HTMLElement,\r\n    console_log: TestConsoleLogElement;\r\n}\r\n\r\nexport class TestDashboard {\r\n    private tests: Array<TestClass> = [];\r\n    private elements: TestDashboardElements;\r\n\r\n    constructor() {\r\n        this.elements = this.create_dashboard_elements();\r\n    }\r\n\r\n    public get_element(): HTMLElement {\r\n        return this.elements.dashboard;\r\n    }\r\n\r\n    protected create_dashboard_elements(): TestDashboardElements {\r\n        const dashboard = this.create_dashboard_wrapping_element();\r\n        const button_list = this.create_test_button_list();\r\n        const console_log = new TestConsoleLogElement();\r\n\r\n        dashboard.append(button_list);\r\n        dashboard.append(console_log.get_element());\r\n\r\n        this.elements = {\r\n            dashboard,\r\n            button_list,\r\n            console_log,\r\n        };\r\n\r\n        return this.elements;\r\n    }\r\n\r\n    protected create_dashboard_wrapping_element(): HTMLElement {\r\n        const dashboard = document.createElement('div');\r\n        dashboard.className = 'test-dashboard';\r\n        return dashboard;\r\n    }\r\n\r\n    protected create_test_button_list(): HTMLUListElement {\r\n        const button_list = document.createElement('ul');\r\n        button_list.className = \"test-dashboard__button-list\";\r\n\r\n        const button_start_all = this.create_element_button('Run all tests', this.start_all_tests_func);\r\n        button_list.append(button_start_all);\r\n        this.tests.forEach((test: TestClass) => {\r\n            const button = this.create_element_for_test_button(test);\r\n            button_list.append(button);\r\n        });\r\n        return button_list;\r\n    }\r\n\r\n    protected create_element_for_test_button(test: TestClass): HTMLElement {\r\n        return this.create_element_button(test.get_name(), () => {\r\n            this.elements.console_log.clear();\r\n            test.run_all_test_cases();\r\n        });\r\n    }\r\n\r\n    protected create_element_button(text: string, on_click: () => void): HTMLElement {\r\n        let list_item = document.createElement('li');\r\n        let button = document.createElement('button');\r\n        button.innerText = text;\r\n        button.addEventListener('click', on_click);\r\n        list_item.append(button);\r\n        return list_item;\r\n    }\r\n\r\n    public add_test(tests: TestClass | TestClass[]): this {\r\n        if (!(tests instanceof Array)) {\r\n            tests = [tests];\r\n        }\r\n        tests.forEach((test: TestClass) => {\r\n            this.tests.push(test);\r\n            if (this.elements) {\r\n                this.elements.button_list.append(this.create_element_for_test_button(test));\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    public start_all_tests_func = () => {\r\n        this.elements.console_log.clear();\r\n        console.log('Starting Tests ... ');\r\n        for (const test of this.tests) {\r\n            test.run_all_test_cases();\r\n        }\r\n        console.log(' ... Tests finished');\r\n    }\r\n}","// export * from \"./TestClass\"\r\nimport { TestClass } from \"./TestClass\"\r\nimport { TestDashboard } from \"./TestDashboard\";\r\n\r\nexport var testing = {\r\n    TestClass,\r\n    TestDashboard,\r\n};","export class TreeElementNotFoundException extends Error {\r\n    constructor(message?: string) {\r\n        super(message);\r\n        this.name = TreeElementNotFoundException.name;\r\n        Object.setPrototypeOf(this, TreeElementNotFoundException.prototype);\r\n    }\r\n}","import { TreeElementNotFoundException } from \"./exceptions/TreeElementNotFoundException\";\r\nimport { RectI, Rect } from \"../geometries/Rect\";\r\n\r\nexport class QuadTree<T extends RectI> {\r\n    private root_branch: QuadTreeBranch<T>;\r\n\r\n    constructor(base_rect: RectI) {\r\n        this.root_branch = new QuadTreeBranch<T>(base_rect.x, base_rect.y, base_rect.w, base_rect.h);\r\n    }\r\n\r\n    public pick(rect: RectI): Array<T> {\r\n        return this.root_branch.pick(rect);\r\n    }\r\n\r\n    public add(element: T): void {\r\n        let is_within = Rect.is_within(element, this.root_branch);\r\n        if (is_within) {\r\n            this.root_branch.add(element);\r\n        } else {\r\n            this.elevate_root_branch();\r\n            this.add(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * First wrap the root in a branch that contains the root at the bottom right,\r\n     * then create a branch wich has that new branch in the bottom left, \r\n     * like that the tree expands in all directions \r\n     */\r\n    public elevate_root_branch() {\r\n        const old_root_branch = this.root_branch;\r\n        const extend_top_left_rect = {\r\n            x: old_root_branch.x - old_root_branch.w,\r\n            y: old_root_branch.y - old_root_branch.h,\r\n            w: old_root_branch.w * 2,\r\n            h: old_root_branch.h * 2,\r\n        };\r\n        const extend_bottom_right_rect = {\r\n            x: extend_top_left_rect.x,\r\n            y: extend_top_left_rect.y,\r\n            w: extend_top_left_rect.w * 2,\r\n            h: extend_top_left_rect.h * 2,\r\n        };\r\n\r\n        this.wrap_root_node_in_node_with_rect(extend_top_left_rect, 2);\r\n        this.wrap_root_node_in_node_with_rect(extend_bottom_right_rect, 0);\r\n    }\r\n\r\n    public wrap_root_node_in_node_with_rect(rect: RectI, node_pos: 0 | 1 | 2 | 3) {\r\n        const wrapper_node = new QuadTreeBranch<T>(\r\n            rect.x,\r\n            rect.y,\r\n            rect.w,\r\n            rect.h,\r\n        );\r\n        wrapper_node.create_child_branches();\r\n        if (!wrapper_node.child_branch_nodes) throw new Error();\r\n        wrapper_node.child_branch_nodes[node_pos] = this.root_branch;\r\n        this.root_branch = wrapper_node;\r\n    }\r\n\r\n    public change_element(element: T, rect: RectI) {\r\n        this.remove(element);\r\n        element.x = rect.x;\r\n        element.y = rect.y;\r\n        element.w = rect.w;\r\n        element.h = rect.h;\r\n        this.add(element);\r\n    }\r\n\r\n    public remove(element: T) {\r\n        if (!this.root_branch.remove(element)) {\r\n            throw new TreeElementNotFoundException();\r\n        }\r\n    }\r\n\r\n    public is_empty(): boolean {\r\n        return this.root_branch.is_empty();\r\n    }\r\n\r\n    public clear() {\r\n        this.root_branch.clear(8);\r\n    }\r\n}\r\n\r\nexport class QuadTreeBranch<T extends RectI> extends Rect {\r\n    public child_branch_nodes: [QuadTreeBranch<T>, QuadTreeBranch<T>, QuadTreeBranch<T>, QuadTreeBranch<T>] | null = null;\r\n    public elements: Array<T> = [];\r\n\r\n    public add(element: T): boolean {\r\n        if (this.child_branch_nodes === null) {\r\n            this.elements.push(element);\r\n            this.create_child_branches_if_necessary();\r\n            return true;\r\n        };\r\n        const overlapping_branches = this.child_branch_nodes.filter((branch) => {\r\n            return branch.overlaps_with(element);\r\n        }, []);\r\n        if (overlapping_branches.length === 0) throw Error('Inconsistent Result');\r\n        if (overlapping_branches.length === 1) {\r\n            overlapping_branches[0].add(element);\r\n        } else {\r\n            this.elements.push(element);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public readd_own_elements(): void {\r\n        const elements = this.elements.splice(0);\r\n        elements.forEach((element) => {\r\n            this.add(element);\r\n        });\r\n    }\r\n\r\n    public create_child_branches_if_necessary() {\r\n        if (this.elements.length < 10) return;\r\n        this.create_child_branches();\r\n        this.readd_own_elements();\r\n    }\r\n\r\n    public create_child_branches() {\r\n        const w_half = this.w / 2;\r\n        const h_half = this.h / 2;\r\n        this.child_branch_nodes = [\r\n            new QuadTreeBranch<T>(this.x, this.y, w_half, h_half),\r\n            new QuadTreeBranch<T>(this.x + w_half, this.y, w_half, h_half),\r\n            new QuadTreeBranch<T>(this.x + w_half, this.y + h_half, w_half, h_half),\r\n            new QuadTreeBranch<T>(this.x, this.y + h_half, w_half, h_half),\r\n        ];\r\n    }\r\n\r\n    public pick(rect: RectI, result: Array<T> = []): Array<T> {\r\n        if (!this.overlaps_with(rect)) return result;\r\n        result.push(...this.elements.filter((element) => Rect.overlap(rect, element)));\r\n        if (this.child_branch_nodes === null) return result;\r\n        if (this.is_within(rect)) return this.pick_all(result);\r\n        for (let branch of this.child_branch_nodes) {\r\n            branch.pick(rect, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public pick_all(result: Array<T>): Array<T> {\r\n        result.push(...this.elements);\r\n        if (this.child_branch_nodes === null) return result;\r\n        for (let branch of this.child_branch_nodes) {\r\n            branch.pick_all(result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public remove(element: T): boolean {\r\n        const id = this.elements.indexOf(element);\r\n        if (id !== -1) {\r\n            this.elements.splice(id, 1);\r\n            return true;\r\n        }\r\n        if (this.child_branch_nodes === null) return false;\r\n        for (let branch of this.child_branch_nodes) {\r\n            if (branch.remove(element)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public is_empty(): boolean {\r\n        if (!this.is_self_empty()) return false;\r\n        if (this.child_branch_nodes === null) return true;\r\n        for (let branch of this.child_branch_nodes) {\r\n            if (!branch.is_empty()) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public is_self_empty(): boolean {\r\n        return this.elements.length === 0;\r\n    }\r\n\r\n    public clear(max_levels_deep: number) {\r\n        this.elements.splice(0);\r\n        if (this.child_branch_nodes) {\r\n            if (max_levels_deep <= 0) {\r\n                this.child_branch_nodes = null;\r\n            } else {\r\n                this.child_branch_nodes.forEach((node) => {\r\n                    node.clear(max_levels_deep - 1);\r\n                })\r\n            }\r\n        }\r\n    }\r\n}","import { QuadTree } from \"./QuadTree\";\r\nimport { TreeElementNotFoundException } from \"./exceptions/TreeElementNotFoundException\";\r\nexport * from \"./QuadTree\";\r\nexport * from \"./exceptions/TreeElementNotFoundException\";\r\n\r\nexport var trees = {\r\n    exceptions: {\r\n        TreeElementNotFoundException,\r\n    },\r\n    QuadTree,\r\n}","import { ModelCollectionBase } from \"./Collections\";\r\n\r\nexport interface ModelInterface {\r\n\r\n}\r\n\r\nexport class Model<MODEL_COLLECTION extends ModelCollectionBase> implements ModelInterface {\r\n    constructor(protected models: MODEL_COLLECTION) { }\r\n}","import { ViewCollectionBase } from \"./Collections\";\r\nimport { View } from \"./View\";\r\n\r\nexport class CanvasView<COLLECTION extends ViewCollectionBase> extends View<COLLECTION> {\r\n    protected context: CanvasRenderingContext2D;\r\n    public constructor(public canvas: HTMLCanvasElement, collection: COLLECTION) {\r\n        super(collection);\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) throw new Error(\"could not create context\");\r\n        this.context = ctx;\r\n    }\r\n    protected reset_canvas_state() {\r\n        this.context.font = \"32px monospace\";\r\n        this.context.textAlign = \"left\";\r\n        this.context.fillStyle = \"black\";\r\n        this.context.strokeStyle = \"white\";\r\n    }\r\n}","import { ControllerEvent } from \"../ControllerEvent\";\r\ninterface TimeProvider {\r\n    ingame_time_in_seconds: number\r\n}\r\n\r\nexport function event(event: string | ControllerEvent, time_provider: TimeProvider): ControllerEventConstructor {\r\n    return new ControllerEventConstructor(event, time_provider);\r\n}\r\n\r\n\r\nexport class ControllerEventConstructor implements ControllerEvent {\r\n    public event_name: string;\r\n    public fire_at?: number;\r\n\r\n    constructor(public event: string | ControllerEvent, protected time_provide: TimeProvider) {\r\n        if (typeof event === \"string\") {\r\n            this.event_name = event;\r\n        } else {\r\n            this.event_name = event.event_name;\r\n            Object.assign(this, event);\r\n        }\r\n    }\r\n\r\n    public after_x_seconds(seconds: number): this {\r\n        this.fire_at = this.time_provide.ingame_time_in_seconds + seconds;\r\n        return this;\r\n    }\r\n\r\n    public set_data(data: any) {\r\n        Object.assign(this, data);\r\n        return this;\r\n    }\r\n}","import { EventControllerInterface, is_controller_interface, is_event_controller_interface } from \"./Controller\";\r\nimport { ControllerEvent, is_controller_event } from \"./ControllerEvent\";\r\nimport { ControllerRouteResponse, ControllerRouteResponseType } from \"./ControllerRouteResponse\";\r\nimport { update_controller_response } from \"./helpers/ControllerResponse\";\r\nimport { is_view_interface, ViewInterface } from \"./View\";\r\n\r\n\r\n/**\r\n * <\r\n    // MODEL_COLLECTION extends ModelCollection,\r\n    // VIEW_COLLECTION extends ViewCollection,\r\n    // CONTROLLER_COLLECTION extends ControllerCollection,\r\n    // MODEL extends Model<MODEL_COLLECTION> = Model<MODEL_COLLECTION>,\r\n    // VIEW extends View<VIEW_COLLECTION> = View<VIEW_COLLECTION>,\r\n    // CONTROLLER extends Controller<MODEL_COLLECTION, VIEW_COLLECTION, CONTROLLER_COLLECTION> = Controller<MODEL_COLLECTION, VIEW_COLLECTION, CONTROLLER_COLLECTION>,\r\n    >\r\n */\r\nexport class MvcGame {\r\n    protected active_view: ViewInterface | null = null;\r\n    protected active_controller: EventControllerInterface | null = null;\r\n    protected event_queue: Array<ControllerEvent> = [];\r\n    public ingame_time_in_seconds = 0;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public update(delta_seconds: number) {\r\n        this.ingame_time_in_seconds += delta_seconds;\r\n        if (!this.active_controller) return;\r\n        if (!this.active_controller.update) return;\r\n        this.apply_controller_response(this.active_controller.update(delta_seconds));\r\n        this.handle_events();\r\n    }\r\n\r\n    public handle_events() {\r\n        let event_queue_buffer = [...this.event_queue];\r\n        this.event_queue = [];\r\n        event_queue_buffer = event_queue_buffer.filter((event) => {\r\n            if (event.fire_at && event.fire_at >= this.ingame_time_in_seconds) return true;\r\n            if (!this.active_controller) return false;\r\n            if (!this.active_controller.dispatch_event) return false;\r\n            this.apply_controller_response(this.active_controller.dispatch_event(event));\r\n            return false;\r\n        });\r\n        this.event_queue = [...event_queue_buffer, ...this.event_queue];\r\n    }\r\n\r\n    public apply_controller_response(response: ControllerRouteResponse) {\r\n        const response_struct: ControllerRouteResponseType = update_controller_response({}, response);\r\n        if (response_struct.view !== undefined) {\r\n            this.set_active_view(response_struct.view);\r\n        }\r\n        if (response_struct.controller !== undefined) {\r\n            this.set_active_controller(response_struct.controller);\r\n        }\r\n        if (response_struct.events !== undefined) {\r\n            this.event_queue.push(...response_struct.events);\r\n        }\r\n    }\r\n\r\n    public draw() {\r\n        if (!this.active_view) return;\r\n        if (this.active_view.update) {\r\n            this.active_view.update();\r\n        }\r\n        this.active_view.draw();\r\n    }\r\n\r\n    protected set_active_controller(controller: EventControllerInterface | null) {\r\n        this.active_controller = controller;\r\n    }\r\n\r\n    protected set_active_view(view: ViewInterface | null) {\r\n        this.active_view = view;\r\n    }\r\n}","import { ControllerRouteResponse } from \"./ControllerRouteResponse\";\r\nimport { MvcGame } from \"./MvcGame\";\r\n\r\nexport abstract class MvcCanvasGame<MODELS, VIEWS, CONTROLLERS> extends MvcGame {\r\n    protected canvas: HTMLCanvasElement;\r\n    protected models: MODELS;\r\n    protected views: VIEWS;\r\n    protected controllers: CONTROLLERS;\r\n\r\n    constructor() {\r\n        super();\r\n        const canvas = document.getElementById('canvas');\r\n        if (!(canvas instanceof HTMLCanvasElement)) throw new Error(\"Canvas not found\");\r\n        this.canvas = canvas;\r\n        const models = this.create_models();\r\n        const views = this.create_views(canvas);\r\n        const controllers = this.create_controllers(models, views);\r\n        this.models = models;\r\n        this.views = views;\r\n        this.controllers = controllers;\r\n        this.attach_event_listeners();\r\n        this.apply_controller_response(this.start());\r\n    }\r\n\r\n    protected attach_event_listeners(): void {\r\n        this.canvas.addEventListener(\"keydown\", (event) => {\r\n            if (!this.active_controller) return;\r\n            if (this.active_controller.key_pressed) {\r\n                this.apply_controller_response(this.active_controller.key_pressed(event));\r\n            }\r\n        });\r\n        this.canvas.addEventListener(\"click\", (event) => {\r\n            if (!this.active_controller) return;\r\n            if (this.active_controller.mouse_pressed) {\r\n                const x = (event.x - this.canvas.offsetLeft) * this.canvas.width / this.canvas.clientWidth;\r\n                const y = (event.y - this.canvas.offsetTop) * this.canvas.height / this.canvas.clientHeight;\r\n                const response = this.active_controller.mouse_pressed(event, x, y);\r\n                this.apply_controller_response(response);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected abstract start(): ControllerRouteResponse;\r\n    protected abstract create_models(): MODELS;\r\n    protected abstract create_views(canvas: HTMLCanvasElement): VIEWS;\r\n    protected abstract create_controllers(models: MODELS, views: VIEWS): CONTROLLERS;\r\n}\r\n","import { ModelCollectionBase } from \"./Collections\";\r\nimport { ModelInterface } from \"./Model\";\r\n\r\ninterface ModelClass<MODEL_COLLECTION extends ModelCollectionBase, MODEL> {\r\n    new(collection: MODEL_COLLECTION): MODEL\r\n}\r\n\r\nexport class ModelTable<MODEL_COLLECTION extends ModelCollectionBase, MODEL extends ModelInterface> {\r\n    protected models: Array<MODEL> = [];\r\n    protected model_collection: MODEL_COLLECTION;\r\n    protected model_class: ModelClass<MODEL_COLLECTION, MODEL>;\r\n\r\n    public constructor(model_collection: MODEL_COLLECTION, model_class: ModelClass<MODEL_COLLECTION, MODEL>) {\r\n        this.model_collection = model_collection;\r\n        this.model_class = model_class;\r\n    }\r\n\r\n    public insert_new(modify?: (model: MODEL) => MODEL): MODEL {\r\n        return this.insert(modify\r\n            ? modify(new this.model_class(this.model_collection))\r\n            : new this.model_class(this.model_collection)\r\n        );\r\n    }\r\n\r\n    public insert(model: MODEL): MODEL {\r\n        this.models.push(model);\r\n        return model;\r\n    }\r\n\r\n    public delete(model: MODEL): void {\r\n        this.models = this.models.filter((current) => model !== current);\r\n    }\r\n\r\n    public all(): Array<MODEL> {\r\n        return this.models;\r\n    }\r\n\r\n    public filter(callback: (model: MODEL) => boolean): void {\r\n        this.models = this.models.filter(callback);\r\n    }\r\n\r\n    public map(callback: (model: MODEL) => MODEL): void {\r\n        this.models = this.models.map(callback);\r\n    }\r\n\r\n    public for_each(callback: (model: MODEL) => void) {\r\n        this.models.forEach(callback);\r\n    }\r\n\r\n    /**\r\n     * Return a filtered array of models\r\n     *\r\n     * @param property\r\n     * @param expected_value\r\n     */\r\n    public where<T extends keyof MODEL, V extends NotAFunction<MODEL[T]>>(\r\n        property: T,\r\n        expected_value: V | ((found_value: MODEL[T]) => boolean)\r\n    ): Array<MODEL> {\r\n        let callback: (model: MODEL) => boolean;\r\n        if (expected_value instanceof Function) {\r\n            callback = (model: MODEL) => expected_value(model[property]);\r\n        } else {\r\n            callback = (model: MODEL) => model[property] === expected_value;\r\n        }\r\n        return this.models.filter(callback);\r\n    }\r\n}\r\n\r\ntype NotAFunction<T> = T extends Function ? never : T;","import { Model } from \"./mvc/Model\";\r\nimport { View } from \"./mvc/View\";\r\nimport { Controller } from \"./mvc/Controller\";\r\nimport { CanvasView } from \"./mvc/CanvasView\";\r\nimport { ControllerEventConstructor } from \"./mvc/helpers/ControllerEvent\";\r\nimport { MvcGame as MvcGame } from \"./mvc/MVCgame\";\r\nimport { MvcCanvasGame } from \"./mvc/MvcCanvasGame\";\r\nimport { ModelTable } from \"./mvc/ModelTable\";\r\nimport { update_controller_response } from \"./mvc/helpers/ControllerResponse\";\r\nimport { PromiseController } from \"./mvc/controllers/PromiseController\";\r\n\r\n\r\nexport var abstract = {\r\n    mvc: {\r\n        MvcGame,\r\n        MvcCanvasGame,\r\n        CanvasView,\r\n        Model,\r\n        ModelTable,\r\n        View,\r\n        Controller,\r\n        helpers: {\r\n            ControllerEventConstructor,\r\n            update_controller_response,\r\n        },\r\n        controllers: {\r\n            PromiseController\r\n        },\r\n    },\r\n};","export class RgbColor {\r\n    public constructor(\r\n        public r: number = 0,\r\n        public g: number = 0,\r\n        public b: number = 0,\r\n        public a: number = 255,\r\n    ) {\r\n\r\n    }\r\n\r\n    public to_hex(): string {\r\n        return \"#\" + [this.r, this.g, this.b, this.a].map(v => (\"00\" + v.toString(16)).substr(-2)).join('');\r\n    }\r\n\r\n    public lerp(other: RgbColor, t: number): RgbColor {\r\n        return new RgbColor(\r\n            this.r * (1 - t) + other.r * t,\r\n            this.g * (1 - t) + other.g * t,\r\n            this.b * (1 - t) + other.b * t,\r\n            this.a * (1 - t) + other.a * t,\r\n        );\r\n    }\r\n}","import { RgbColor } from \"./RgbColor\"\r\n\r\n\r\n\r\nexport var data = {\r\n    RgbColor\r\n};","import { RgbColor } from \"../data/RgbColor\";\r\n\r\nexport var Colors = {\r\n    RED: new RgbColor(255, 0, 0),\r\n    BLUE: new RgbColor(0, 0, 255),\r\n    GREEN: new RgbColor(0, 255, 0),\r\n    BLACK: new RgbColor(0, 0, 0),\r\n    WHITE: new RgbColor(255, 255, 255),\r\n}","import { Colors } from \"./Colors\";\r\n\r\nexport var commons = {\r\n    Colors,\r\n};","\r\nimport { signals } from \"./src/signals\";\r\nimport { assets } from \"./src/assets\";\r\nimport { geometries } from \"./src/geometries\";\r\nimport { testing } from \"./src/testing\";\r\nimport { trees } from \"./src/trees\";\r\nimport { abstract } from \"./src/abstract\";\r\nimport { data } from \"./src/data\";\r\nimport { commons } from \"./src/commons\";\r\n\r\nexport var tools = {\r\n    signals,\r\n    assets,\r\n    geometries,\r\n    testing,\r\n    trees,\r\n    abstract,\r\n    data,\r\n    commons,\r\n};","import { ViewCollectionBase } from \"./Collections\";\r\n\r\nexport interface ViewInterface {\r\n    update: (() => void) | null;\r\n    draw: () => void;\r\n    set_update: (update: () => void) => this;\r\n}\r\n\r\nexport function is_view_interface(view: any): view is ViewInterface {\r\n    return view instanceof View;\r\n}\r\nexport class View<VIEW_COLLECTION extends ViewCollectionBase> implements ViewInterface {\r\n    public constructor(protected collection: VIEW_COLLECTION) {\r\n\r\n    }\r\n    public update: (() => void) | null = null;\r\n    public draw() { };\r\n\r\n    public set_update(update: () => void): this {\r\n        this.update = update;\r\n        return this;\r\n    }\r\n}","import { ViewCollectionBase } from \"./Collections\";\r\nimport { View } from \"./View\";\r\n\r\nexport class CanvasView<COLLECTION extends ViewCollectionBase> extends View<COLLECTION> {\r\n    protected context: CanvasRenderingContext2D;\r\n    public constructor(public canvas: HTMLCanvasElement, collection: COLLECTION) {\r\n        super(collection);\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) throw new Error(\"could not create context\");\r\n        this.context = ctx;\r\n    }\r\n    protected reset_canvas_state() {\r\n        this.context.font = \"32px monospace\";\r\n        this.context.textAlign = \"left\";\r\n        this.context.fillStyle = \"black\";\r\n        this.context.strokeStyle = \"white\";\r\n    }\r\n}","import { tools } from \"@game.object/ts-game-toolbox\";\r\nimport { CanvasView } from \"@game.object/ts-game-toolbox/src/abstract/mvc/CanvasView\";\r\nimport { RgbColor } from \"@game.object/ts-game-toolbox/src/data/RgbColor\";\r\nimport { ChainProperty } from \"@game.object/ts-game-toolbox/dist/src/signals/ChainProperty\";\r\nimport { ViewCollection } from \"../ViewCollection\";\r\nimport { Vector2, Vector2I } from \"@game.object/ts-game-toolbox/dist/src/geometries/Vector2\";\r\nimport { RectI } from \"@game.object/ts-game-toolbox/dist/src/geometries/Rect\";\r\nimport { CameraModel } from \"../../models/CameraModel\";\r\nimport { PlayerModel } from \"../../models/PlayerModel\";\r\n\r\ninterface ViewMemoryCardAttr {\r\n    collider: RectI;\r\n    is_revealed: boolean;\r\n    is_drawn: boolean;\r\n    color: RgbColor;\r\n}\r\n\r\ninterface ViewPlayerAttr {\r\n\r\n}\r\n\r\nexport class MainView extends CanvasView<ViewCollection> {\r\n    /// Base Colors\r\n    public bg_color = new ChainProperty<this, RgbColor>(this, tools.commons.Colors.BLACK);\r\n    public fg_color = new ChainProperty<this, RgbColor>(this, tools.commons.Colors.WHITE);\r\n    public hi_color = new ChainProperty<this, RgbColor>(this, tools.commons.Colors.RED);\r\n    /// memory cards\r\n    public memory_cards = new ChainProperty<this, Array<ViewMemoryCardAttr>>(this, []);\r\n    // Camera\r\n    public camera = new ChainProperty<this, CameraModel | null>(this, null);\r\n    // players \r\n    public players = new ChainProperty<this, Array<PlayerModel>>(this, []);\r\n    // players turn\r\n    public current_player = new ChainProperty<this, PlayerModel | null>(this, null);\r\n\r\n    /// configuration\r\n    private readonly card_bg_color = new RgbColor(0x08, 0x08, 0x08);\r\n\r\n    public draw(): void {\r\n        this.reset_canvas_state();\r\n        const camera = this.camera.get();\r\n        if (!camera) {\r\n            console.log('no camera');\r\n            return;\r\n        }\r\n        this.context.translate(camera.center.x, camera.center.y);\r\n        this.context.strokeStyle = \"#282828\";\r\n        this.context.beginPath();\r\n        this.memory_cards.get().forEach((card: ViewMemoryCardAttr) => {\r\n            if (card.is_drawn) return;\r\n            if (card.is_revealed) {\r\n                this.context.fillStyle = card.color.to_hex();\r\n            } else {\r\n                this.context.fillStyle = this.card_bg_color.to_hex();\r\n            }\r\n            this.context.fillRect(card.collider.x, card.collider.y, card.collider.w, card.collider.h);\r\n            this.context.rect(card.collider.x, card.collider.y, card.collider.w, card.collider.h);\r\n        });\r\n        this.players.get().forEach((player: PlayerModel) => {\r\n            if (this.current_player.get() === player) {\r\n                this.context.fillStyle = this.hi_color.get().to_hex();\r\n                this.context.fillRect((player.id - 1) * 150 + 50 - 25, 500 - 8, 150, 32)\r\n            }\r\n            this.context.fillStyle = this.fg_color.get().to_hex();\r\n            this.context.fillText(\"Player \" + player.id + \": \" + player.points, (player.id - 1) * 150 + 50, 500);\r\n        });\r\n        this.context.stroke();\r\n        this.context.resetTransform();\r\n    }\r\n\r\n    /**\r\n     * Reset default canvas state and paint the background\r\n     */\r\n    protected reset_canvas_state() {\r\n        super.reset_canvas_state();\r\n        this.context.fillStyle = this.bg_color.get().to_hex();\r\n        this.context.fillRect(0, 0, 800, 600);\r\n        this.context.fillStyle = this.fg_color.get().to_hex();\r\n        this.context.lineWidth = 2;\r\n        this.context.font = \"16px monospace\";\r\n        this.context.lineJoin = \"round\";\r\n        this.context.textAlign = \"left\";\r\n        this.context.textBaseline = \"top\";\r\n        this.context.imageSmoothingEnabled = false;\r\n    }\r\n}","import { ViewCollectionBase } from \"@game.object/ts-game-toolbox/dist/src/abstract/mvc/Collections\";\r\nimport { MainView } from \"./main/MainView\";\r\n\r\nexport interface ViewCollection extends ViewCollectionBase {\r\n    main: MainView,\r\n    partials: {\r\n    }\r\n}\r\n\r\nexport function create_views(canvas: HTMLCanvasElement): ViewCollection {\r\n    const collection: ViewCollection = {} as ViewCollection;\r\n    const main = new MainView(canvas, collection);\r\n    return Object.assign(collection, {\r\n        main,\r\n        partials: {\r\n        }\r\n    });\r\n}","import { ModelCollectionBase } from \"./Collections\";\r\nimport { ModelInterface } from \"./Model\";\r\n\r\ninterface ModelClass<MODEL_COLLECTION extends ModelCollectionBase, MODEL> {\r\n    new(collection: MODEL_COLLECTION): MODEL\r\n}\r\n\r\nexport class ModelTable<MODEL_COLLECTION extends ModelCollectionBase, MODEL extends ModelInterface> {\r\n    protected models: Array<MODEL> = [];\r\n    protected model_collection: MODEL_COLLECTION;\r\n    protected model_class: ModelClass<MODEL_COLLECTION, MODEL>;\r\n\r\n    public constructor(model_collection: MODEL_COLLECTION, model_class: ModelClass<MODEL_COLLECTION, MODEL>) {\r\n        this.model_collection = model_collection;\r\n        this.model_class = model_class;\r\n    }\r\n\r\n    public insert_new(modify?: (model: MODEL) => MODEL): MODEL {\r\n        return this.insert(modify\r\n            ? modify(new this.model_class(this.model_collection))\r\n            : new this.model_class(this.model_collection)\r\n        );\r\n    }\r\n\r\n    public insert(model: MODEL): MODEL {\r\n        this.models.push(model);\r\n        return model;\r\n    }\r\n\r\n    public delete(model: MODEL): void {\r\n        this.models = this.models.filter((current) => model !== current);\r\n    }\r\n\r\n    public all(): Array<MODEL> {\r\n        return this.models;\r\n    }\r\n\r\n    public filter(callback: (model: MODEL) => boolean): void {\r\n        this.models = this.models.filter(callback);\r\n    }\r\n\r\n    public map(callback: (model: MODEL) => MODEL): void {\r\n        this.models = this.models.map(callback);\r\n    }\r\n\r\n    public for_each(callback: (model: MODEL) => void) {\r\n        this.models.forEach(callback);\r\n    }\r\n\r\n    /**\r\n     * Return a filtered array of models\r\n     *\r\n     * @param property\r\n     * @param expected_value\r\n     */\r\n    public where<T extends keyof MODEL, V extends NotAFunction<MODEL[T]>>(\r\n        property: T,\r\n        expected_value: V | ((found_value: MODEL[T]) => boolean)\r\n    ): Array<MODEL> {\r\n        let callback: (model: MODEL) => boolean;\r\n        if (expected_value instanceof Function) {\r\n            callback = (model: MODEL) => expected_value(model[property]);\r\n        } else {\r\n            callback = (model: MODEL) => model[property] === expected_value;\r\n        }\r\n        return this.models.filter(callback);\r\n    }\r\n}\r\n\r\ntype NotAFunction<T> = T extends Function ? never : T;","export function assert_never(variable: never): never {\r\n    return variable;\r\n}\r\n","import { Rect } from \"@game.object/ts-game-toolbox/dist/src/geometries/Rect\";\r\nimport { Vector2, Vector2I } from \"@game.object/ts-game-toolbox/dist/src/geometries/Vector2\";\r\nimport { ChainProperty } from \"@game.object/ts-game-toolbox/dist/src/signals/ChainProperty\";\r\nimport { Model } from \"@game.object/ts-game-toolbox/src/abstract/mvc/Model\";\r\nimport { assert_never } from \"../../tools/helper\";\r\nimport { ModelCollection } from \"./ModelCollection\";\r\n\r\nexport class CameraModel extends Model<ModelCollection>{\r\n    public center = new Vector2(0, 0);\r\n\r\n    public transform(shape: Rect): Rect;\r\n    public transform(shape: Vector2): Vector2;\r\n    public transform(shape: Vector2 | Rect): Vector2 | Rect {\r\n        if (shape instanceof Rect) return this.transformRect(shape);\r\n        if (shape instanceof Vector2) return this.transformVector2(shape);\r\n        return assert_never(shape);\r\n    }\r\n\r\n    public transformVector2(vector2: Vector2): Vector2 {\r\n        return vector2.add(this.center);\r\n    }\r\n\r\n    public transformRect(rect: Rect): Rect {\r\n        rect.x += this.center.x;\r\n        rect.y += this.center.y;\r\n        return rect;\r\n    }\r\n\r\n}","import { Model } from \"@game.object/ts-game-toolbox/src/abstract/mvc/Model\";\r\nimport { ModelCollection } from \"./ModelCollection\";\r\nimport { PlayerModel } from \"./PlayerModel\";\r\n\r\nexport class GameModel extends Model<ModelCollection> {\r\n    public max_player_id = 0;\r\n    public active_player: PlayerModel | null = null;\r\n\r\n    public next_player() {\r\n        if (this.active_player === null) return;\r\n        if (this.active_player.id >= this.models.game.max_player_id) {\r\n            this.active_player = this.models.players.all()[0];\r\n        } else {\r\n            this.active_player = this.models.players.where('id', this.active_player.id + 1)[0];\r\n        }\r\n    }\r\n}","import { tools } from \"@game.object/ts-game-toolbox\";\r\nimport { Rect } from \"@game.object/ts-game-toolbox/dist/src/geometries/Rect\";\r\nimport { Vector2 } from \"@game.object/ts-game-toolbox/dist/src/geometries/Vector2\";\r\nimport { Model } from \"@game.object/ts-game-toolbox/src/abstract/mvc/Model\";\r\nimport { RgbColor } from \"@game.object/ts-game-toolbox/src/data/RgbColor\";\r\nimport { ModelCollection } from \"./ModelCollection\";\r\n\r\nexport class MemoryCardModel extends Model<ModelCollection> {\r\n    public color: RgbColor = tools.commons.Colors.WHITE;\r\n    public is_revealed: boolean = false;\r\n    public is_drawn: boolean = false;\r\n    public collider: Rect = new Rect(0, 0, 0, 0);\r\n}","import { ModelCollectionBase } from \"@game.object/ts-game-toolbox/src/abstract/mvc/Collections\";\r\nimport { ModelTable } from \"@game.object/ts-game-toolbox/src/abstract/mvc/ModelTable\";\r\nimport { CameraModel } from \"./CameraModel\";\r\nimport { GameModel } from \"./GameModel\";\r\nimport { MemoryCardModel } from \"./MemoryCardModel\";\r\nimport { PlayerModel } from \"./PlayerModel\";\r\n\r\n\r\nexport interface ModelCollection extends ModelCollectionBase {\r\n    game: GameModel,\r\n    camera: CameraModel,\r\n    players: ModelTable<ModelCollection, PlayerModel>,\r\n    cards: ModelTable<ModelCollection, MemoryCardModel>,\r\n}\r\n\r\nexport function create_models(): ModelCollection {\r\n    const collection: ModelCollection = {} as ModelCollection;\r\n    return Object.assign(collection, {\r\n        game: new GameModel(collection),\r\n        camera: new CameraModel(collection),\r\n        players: new ModelTable(collection, PlayerModel),\r\n        cards: new ModelTable(collection, MemoryCardModel),\r\n    });\r\n}","import { ControllerCollectionBase, ModelCollectionBase, ViewCollectionBase } from \"./Collections\";\r\nimport { ControllerEvent } from \"./ControllerEvent\";\r\nimport { ControllerRouteResponse, ControllerRouteResponseType } from \"./ControllerRouteResponse\";\r\n\r\nexport interface ControllerInterface {\r\n\r\n}\r\nexport class Controller<\r\n    MODEL_COLLECTION extends ModelCollectionBase,\r\n    VIEW_COLLECTION extends ViewCollectionBase,\r\n    CONTROLLER_COLLECTION extends ControllerCollectionBase\r\n    > implements ControllerInterface {\r\n    public constructor(\r\n        protected models: MODEL_COLLECTION,\r\n        protected views: VIEW_COLLECTION,\r\n        protected controllers: CONTROLLER_COLLECTION,\r\n    ) {\r\n\r\n    }\r\n}\r\n\r\nexport function is_controller_interface(controller: any): controller is ControllerInterface {\r\n    return controller instanceof Controller;\r\n}\r\nexport interface EventControllerInterface {\r\n    key_up?: (event: KeyboardEvent) => ControllerRouteResponse;\r\n    key_down?: (event: KeyboardEvent) => ControllerRouteResponse;\r\n    key_pressed?: (event: KeyboardEvent) => ControllerRouteResponse;\r\n    mouse_up?: (event: MouseEvent, canvas_x: number, canvas_y: number) => ControllerRouteResponse;\r\n    mouse_down?: (event: MouseEvent, canvas_x: number, canvas_y: number) => ControllerRouteResponse;\r\n    mouse_pressed?: (event: MouseEvent, canvas_x: number, canvas_y: number) => ControllerRouteResponse;\r\n    mouse_moved?: (event: MouseEvent, canvas_x: number, canvas_y: number) => ControllerRouteResponse;\r\n    update?: (delta_seconds: number) => ControllerRouteResponse;\r\n    dispatch_event?: (event: ControllerEvent) => ControllerRouteResponse;\r\n}\r\n\r\nexport function is_event_controller_interface(controller: any): controller is EventControllerInterface {\r\n    return controller instanceof Controller;\r\n}","export interface ControllerEvent {\r\n    event_name: string;\r\n    fire_at?: number;\r\n}\r\n\r\nexport function is_controller_event(object: any): object is ControllerEvent {\r\n    return typeof object === \"object\" && \"event_name\" in object;\r\n}","import { is_event_controller_interface } from \"../Controller\";\r\nimport { is_controller_event } from \"../ControllerEvent\";\r\nimport { ControllerRouteResponseType, ControllerRouteResponse } from \"../ControllerRouteResponse\";\r\nimport { is_view_interface } from \"../View\";\r\n\r\n\r\nexport function update_controller_response<T extends ControllerRouteResponseType>(base: T, response: ControllerRouteResponse): T {\r\n    if (response === null) {\r\n        return base;\r\n    }\r\n    if (is_view_interface(response)) {\r\n        base.view = response;\r\n        return base;\r\n    }\r\n    if (is_event_controller_interface(response)) {\r\n        base.controller = response;\r\n        return base;\r\n    }\r\n    if (is_controller_event(response)) {\r\n        if (base.events === undefined) base.events = [];\r\n        base.events.push(response);\r\n        return base;\r\n    }\r\n    base.controller = response.controller;\r\n    base.view = response.view;\r\n    if (response.events !== undefined) {\r\n        if (base.events === undefined) base.events = [];\r\n        base.events.push(...response.events);\r\n    }\r\n    return base;\r\n}","import { EventControllerInterface, is_controller_interface, is_event_controller_interface } from \"./Controller\";\r\nimport { ControllerEvent, is_controller_event } from \"./ControllerEvent\";\r\nimport { ControllerRouteResponse, ControllerRouteResponseType } from \"./ControllerRouteResponse\";\r\nimport { update_controller_response } from \"./helpers/ControllerResponse\";\r\nimport { is_view_interface, ViewInterface } from \"./View\";\r\n\r\n\r\n/**\r\n * <\r\n    // MODEL_COLLECTION extends ModelCollection,\r\n    // VIEW_COLLECTION extends ViewCollection,\r\n    // CONTROLLER_COLLECTION extends ControllerCollection,\r\n    // MODEL extends Model<MODEL_COLLECTION> = Model<MODEL_COLLECTION>,\r\n    // VIEW extends View<VIEW_COLLECTION> = View<VIEW_COLLECTION>,\r\n    // CONTROLLER extends Controller<MODEL_COLLECTION, VIEW_COLLECTION, CONTROLLER_COLLECTION> = Controller<MODEL_COLLECTION, VIEW_COLLECTION, CONTROLLER_COLLECTION>,\r\n    >\r\n */\r\nexport class MvcGame {\r\n    protected active_view: ViewInterface | null = null;\r\n    protected active_controller: EventControllerInterface | null = null;\r\n    protected event_queue: Array<ControllerEvent> = [];\r\n    public ingame_time_in_seconds = 0;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public update(delta_seconds: number) {\r\n        this.ingame_time_in_seconds += delta_seconds;\r\n        if (!this.active_controller) return;\r\n        if (!this.active_controller.update) return;\r\n        this.apply_controller_response(this.active_controller.update(delta_seconds));\r\n        this.handle_events();\r\n    }\r\n\r\n    public handle_events() {\r\n        let event_queue_buffer = [...this.event_queue];\r\n        this.event_queue = [];\r\n        event_queue_buffer = event_queue_buffer.filter((event) => {\r\n            if (event.fire_at && event.fire_at >= this.ingame_time_in_seconds) return true;\r\n            if (!this.active_controller) return false;\r\n            if (!this.active_controller.dispatch_event) return false;\r\n            this.apply_controller_response(this.active_controller.dispatch_event(event));\r\n            return false;\r\n        });\r\n        this.event_queue = [...event_queue_buffer, ...this.event_queue];\r\n    }\r\n\r\n    public apply_controller_response(response: ControllerRouteResponse) {\r\n        const response_struct: ControllerRouteResponseType = update_controller_response({}, response);\r\n        if (response_struct.view !== undefined) {\r\n            this.set_active_view(response_struct.view);\r\n        }\r\n        if (response_struct.controller !== undefined) {\r\n            this.set_active_controller(response_struct.controller);\r\n        }\r\n        if (response_struct.events !== undefined) {\r\n            this.event_queue.push(...response_struct.events);\r\n        }\r\n    }\r\n\r\n    public draw() {\r\n        if (!this.active_view) return;\r\n        if (this.active_view.update) {\r\n            this.active_view.update();\r\n        }\r\n        this.active_view.draw();\r\n    }\r\n\r\n    protected set_active_controller(controller: EventControllerInterface | null) {\r\n        this.active_controller = controller;\r\n    }\r\n\r\n    protected set_active_view(view: ViewInterface | null) {\r\n        this.active_view = view;\r\n    }\r\n}","import { ControllerRouteResponse } from \"./ControllerRouteResponse\";\r\nimport { MvcGame } from \"./MvcGame\";\r\n\r\nexport abstract class MvcCanvasGame<MODELS, VIEWS, CONTROLLERS> extends MvcGame {\r\n    protected canvas: HTMLCanvasElement;\r\n    protected models: MODELS;\r\n    protected views: VIEWS;\r\n    protected controllers: CONTROLLERS;\r\n\r\n    constructor() {\r\n        super();\r\n        const canvas = document.getElementById('canvas');\r\n        if (!(canvas instanceof HTMLCanvasElement)) throw new Error(\"Canvas not found\");\r\n        this.canvas = canvas;\r\n        const models = this.create_models();\r\n        const views = this.create_views(canvas);\r\n        const controllers = this.create_controllers(models, views);\r\n        this.models = models;\r\n        this.views = views;\r\n        this.controllers = controllers;\r\n        this.attach_event_listeners();\r\n        this.apply_controller_response(this.start());\r\n    }\r\n\r\n    protected attach_event_listeners(): void {\r\n        this.canvas.addEventListener(\"keydown\", (event) => {\r\n            if (!this.active_controller) return;\r\n            if (this.active_controller.key_pressed) {\r\n                this.apply_controller_response(this.active_controller.key_pressed(event));\r\n            }\r\n        });\r\n        this.canvas.addEventListener(\"click\", (event) => {\r\n            if (!this.active_controller) return;\r\n            if (this.active_controller.mouse_pressed) {\r\n                const x = (event.x - this.canvas.offsetLeft) * this.canvas.width / this.canvas.clientWidth;\r\n                const y = (event.y - this.canvas.offsetTop) * this.canvas.height / this.canvas.clientHeight;\r\n                const response = this.active_controller.mouse_pressed(event, x, y);\r\n                this.apply_controller_response(response);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected abstract start(): ControllerRouteResponse;\r\n    protected abstract create_models(): MODELS;\r\n    protected abstract create_views(canvas: HTMLCanvasElement): VIEWS;\r\n    protected abstract create_controllers(models: MODELS, views: VIEWS): CONTROLLERS;\r\n}\r\n","import { ControllerCollection, create_controllers } from \"../controllers/ControllerCollection\";\r\nimport { create_views, ViewCollection } from \"../views/ViewCollection\";\r\nimport { create_models, ModelCollection } from \"../models/ModelCollection\";\r\nimport { ControllerRouteResponse } from \"@game.object/ts-game-toolbox/src/abstract/mvc/ControllerRouteResponse\";\r\nimport { MvcCanvasGame } from \"@game.object/ts-game-toolbox/src/abstract/mvc/MvcCanvasGame\";\r\n\r\nexport class Game extends MvcCanvasGame<ModelCollection, ViewCollection, ControllerCollection> {\r\n\r\n\r\n    public attach_event_listeners() {\r\n        super.attach_event_listeners();\r\n    }\r\n\r\n    public update(delta_seconds: number) {\r\n        super.update(delta_seconds);\r\n    }\r\n\r\n    protected start(): ControllerRouteResponse {\r\n        return this.controllers.game_controller.new_game();\r\n    }\r\n\r\n    protected create_models(): ModelCollection {\r\n        return create_models();\r\n    }\r\n\r\n    protected create_views(canvas: HTMLCanvasElement): ViewCollection {\r\n        return create_views(canvas);\r\n    }\r\n\r\n    protected create_controllers(models: ModelCollection, views: ViewCollection): ControllerCollection {\r\n        return create_controllers(models, views);\r\n    }\r\n}","import { Game } from \"./base/Game\";\r\n\r\nexport function load_game() {\r\n    start_game();\r\n}\r\n\r\nfunction start_game(): Game {\r\n    let game: Game = new Game();\r\n    let now = performance.now();\r\n    let animation_frame = (timestamp: number) => {\r\n        const delta_ms = 16; (timestamp - now);\r\n        game.update(delta_ms / 1000);\r\n        now = timestamp;\r\n        game.draw();\r\n        requestAnimationFrame(animation_frame);\r\n    }\r\n    requestAnimationFrame(animation_frame);\r\n    return game;\r\n} ","import { load_game } from \"./game/main\";\r\n\r\n(() => {\r\n    const app = document.getElementById('app');\r\n    if (!(app instanceof HTMLDivElement)) throw new Error(\"Could not locate canvas\");\r\n    load_game();\r\n})();"]}